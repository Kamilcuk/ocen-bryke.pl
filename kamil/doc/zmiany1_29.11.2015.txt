
1. klasa user dostała 5 nowych metody: - przykłady w kamil/doc/user_doc.php
a) $user->getId() -> zwraca id zalogowanego usera
b) $user->actionSprawdzCzyMoje($table, $id)
powiedzmy że mamy samochód o iID_samochodu = 7 i chcemy się dowiedzieć
czy to jest samochód naszego użytkownika $user = new user("kamil", "kamil");
to robimy if ( $user->actionSprawdzCzyMoje("Samochod", 7);
pierwszy parametr to nazwa tabeli , drugi to id elementu w tej tabeli
zwracana jest wartość true lub false
c) $user->actionDodaj($table = null, array $vals = array())
pierwszy parametr to nazwa tabeli, 
drugi parametr to array gdzie kluczami są nazwy kolumn a wartościami wartości tych kolumn
Powiedzmy że użytkownik chce dodać Komentarz o treści dupa do zdjęcia o ID_zdjęcia 15
$user->actionDodaj("Komentarz", array("ID_zdjecia" => 2, "tresc" => "15"));
przykładu w pliku kamil/doc/user_doc.php
d) $user->actionUsun($table = null, $id = null) 
usuwa daną rzecz z tabeli przez użytkownika. Oczywiście najpierw sprawdza czy dana rzecz jest jego
aby usunąć Komentarz użytkownika o znanym id wystarczy:
$user->actionUsun("Komentarz", 15);
e) $user->actionEdytuj($table, $id, array $vals = array())
to jest funkcja którą pisze, i jeszcze nie jestem pewien czy działa
ma oczywiście edytować element w tabeli $table o znanym $id
gdzie $vals jest takie samo jak w actionDodaj, np
to edytuje opis zdjęcia o id 32
$user->actionEdytuj("Zdjecie", 32, array("opis" => "dupa dupa dupa"));
f) aby edytować informacje _zalogowanego_użytkownika_ wykorzystujemy funkcję
$user->edytuj() która jeszcze nie działa i może niedługo zacznie :D
g) aby np na stronie "Moje konto" wypisać informacje o użytkowniku należy zrobić:
$ret = $user->getInfo();
print "<BR><pre>";print_r($ret);print "</pre><BR>";

2. upload zdjęć działa
wyedytowałem piki w katalogu głównym :
+ upload.php -  dodałem linijkę 'ID_samochodu: <input type=number [...]'
	do uploadu zdjęcia potrzebne jest ID_samochodu
+ tryUpload.php - wpisałem tam funkcję i require który utworzyłem
funkcja upload_image($user=null, $ID_samochodu=null, $_FILE=null) opowiada
za upload zdjęć, dokonuje wszelkich sprawdzeń czy to plik graficzny jakiej wielkośći
oraz władowywuje dane do bazy danych
jeśli funkcja zakończy się powodzeniem, zwraca ID_zdjęcia.
pliki są uploadowane do katalogu uploads/images/ i mają nazwę postaci
	nick_usera."_".$ID_zdjecia.".".$imageFileType;
Kolumna url w tabeli Zdjecia zawiera stringi postaci:
	'uploads/images/'.nick_usera."_".$ID_zdjecia.".".$imageFileType;

3. zrobiłem na razie pierwszą wersję szukajki w pliku kamil/szukaj.inc
funkcja szukaj() to prosty wrapper dookoła selecta w mysql
przykłady i wyjaśnienia są w pliku kamil/doc/szukaj_doc.php
na razie działa tylko równość "kolumna" = "wartość kolumny"
niedługo dorobię tak, żeby wspierać szukanie

-- przykłady dwa, do zaimplementowania od razu:
aby na stronce "Nowe" wyświetlić ostatnio dodane zdjęcia należy:
$ret = szukaj(array("Zdjecie"), "data_dodania");
print "<BR><pre>";print_r($ret);print "</pre><BR>";

aby np na stronie "Moje konto" wypisać informacje o użytkowniku należy zrobić:
$ret = szukaj(array("Uzytkownik:ID_uzytkownika:"$user->getId()));
print "<BR><pre>";print_r($ret);print "</pre><BR>";

więcej przykładów w kamil/doc/szukaj_doc.php

4. klasa db ma wszystkie metody statyczne, więc aby np odpalić query na bazie danych 
wystarczy db::query("costam"); (nie trzeba tworzyć obiektu, bo to bez sensu (new db())->query("costam"); )

5. utworzyłem kamil/debug.inc <- powoduje debugowanie php i klasy db 

6. w pliku kamil/settings.inc przechowuję zmienne globalne (konfigurację)
